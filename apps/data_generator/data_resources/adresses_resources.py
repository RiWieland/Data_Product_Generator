"""
Module for creating synthetic data for human names

Names were generated by using claude.ai using the prompt 
(prompts were following with the project context):
"Can you generate me a list of addresses of different cities in a python list containing 100000 elements"
"""


import random
import string

# Address components for different cities and countries
address_data = {
    # United States
    'new_york': {
        'city': 'New York',
        'state': 'NY',
        'country': 'USA',
        'streets': ['Broadway', 'Fifth Avenue', 'Madison Avenue', 'Park Avenue', 'Lexington Avenue', 'Amsterdam Avenue', 
                   'Columbus Avenue', 'Central Park West', 'Riverside Drive', 'Wall Street', 'Canal Street', 'Houston Street',
                   'Bleecker Street', 'Spring Street', 'Prince Street', 'Grand Street', 'Delancey Street', 'East 14th Street',
                   'West 23rd Street', 'East 42nd Street', 'West 57th Street', 'East 86th Street', 'West 96th Street'],
        'zip_format': lambda: f"{random.randint(10001, 10292)}",
        'house_range': (1, 9999)
    },
    
    'los_angeles': {
        'city': 'Los Angeles',
        'state': 'CA',
        'country': 'USA',
        'streets': ['Sunset Boulevard', 'Hollywood Boulevard', 'Melrose Avenue', 'Beverly Boulevard', 'Wilshire Boulevard',
                   'Santa Monica Boulevard', 'Ventura Boulevard', 'Mulholland Drive', 'Rodeo Drive', 'Vine Street',
                   'La Brea Avenue', 'Fairfax Avenue', 'Crenshaw Boulevard', 'Western Avenue', 'Vermont Avenue'],
        'zip_format': lambda: f"{random.randint(90001, 90899)}",
        'house_range': (1, 9999)
    },
    
    'chicago': {
        'city': 'Chicago',
        'state': 'IL',
        'country': 'USA',
        'streets': ['Michigan Avenue', 'State Street', 'LaSalle Street', 'Clark Street', 'Lake Shore Drive',
                   'North Avenue', 'Division Street', 'Chicago Avenue', 'Grand Avenue', 'Roosevelt Road',
                   'Cermak Road', 'Ashland Avenue', 'Western Avenue', 'Kedzie Avenue', 'Pulaski Road'],
        'zip_format': lambda: f"{random.randint(60601, 60699)}",
        'house_range': (1, 9999)
    },
    
    # United Kingdom
    'london': {
        'city': 'London',
        'state': '',
        'country': 'UK',
        'streets': ['Baker Street', 'Oxford Street', 'Regent Street', 'Bond Street', 'Piccadilly', 'The Strand',
                   'Fleet Street', 'King\'s Road', 'Portobello Road', 'Abbey Road', 'Carnaby Street', 'Downing Street',
                   'Park Lane', 'Edgware Road', 'Tottenham Court Road', 'High Street Kensington', 'Brompton Road'],
        'zip_format': lambda: f"{random.choice(['SW', 'SE', 'NW', 'NE', 'W', 'E', 'WC', 'EC'])}{random.randint(1, 20)} {random.randint(1, 9)}{random.choice(string.ascii_uppercase)}{random.choice(string.ascii_uppercase)}",
        'house_range': (1, 999)
    },
    
    'manchester': {
        'city': 'Manchester',
        'state': '',
        'country': 'UK',
        'streets': ['Deansgate', 'Market Street', 'King Street', 'Cross Street', 'Princess Street', 'Portland Street',
                   'Oxford Road', 'Wilmslow Road', 'Curry Mile', 'Oldham Street', 'Piccadilly', 'Corporation Street'],
        'zip_format': lambda: f"M{random.randint(1, 99)} {random.randint(1, 9)}{random.choice(string.ascii_uppercase)}{random.choice(string.ascii_uppercase)}",
        'house_range': (1, 999)
    },
    
    # Germany
    'berlin': {
        'city': 'Berlin',
        'state': '',
        'country': 'Germany',
        'streets': ['Unter den Linden', 'Friedrichstraße', 'Potsdamer Straße', 'Kurfürstendamm', 'Alexanderplatz',
                   'Karl-Marx-Allee', 'Wilhelmstraße', 'Leipziger Straße', 'Hackescher Markt', 'Prenzlauer Allee',
                   'Warschauer Straße', 'Kantstraße', 'Tauentzienstraße', 'Invalidenstraße', 'Torstraße'],
        'zip_format': lambda: f"{random.randint(10115, 14199)}",
        'house_range': (1, 999)
    },
    
    'munich': {
        'city': 'Munich',
        'state': '',
        'country': 'Germany',
        'streets': ['Marienplatz', 'Maximilianstraße', 'Leopoldstraße', 'Ludwigstraße', 'Prinzregentenstraße',
                   'Theatinerstraße', 'Sendlinger Straße', 'Tal', 'Isarring', 'Elisenstraße', 'Schwabing'],
        'zip_format': lambda: f"{random.randint(80331, 81929)}",
        'house_range': (1, 999)
    },
    
    # France
    'paris': {
        'city': 'Paris',
        'state': '',
        'country': 'France',
        'streets': ['Champs-Élysées', 'Rue de Rivoli', 'Boulevard Saint-Germain', 'Rue Saint-Honoré', 'Boulevard Haussmann',
                   'Rue de la Paix', 'Avenue Montaigne', 'Rue du Faubourg Saint-Honoré', 'Boulevard Saint-Michel',
                   'Rue Montorgueil', 'Rue Mouffetard', 'Avenue des Gobelins', 'Rue de Belleville', 'Rue Oberkampf'],
        'zip_format': lambda: f"{random.randint(75001, 75020)}",
        'house_range': (1, 999)
    },
    
    'lyon': {
        'city': 'Lyon',
        'state': '',
        'country': 'France',
        'streets': ['Rue de la République', 'Rue Victor Hugo', 'Rue Mercière', 'Rue Saint-Jean', 'Cours Lafayette',
                   'Avenue Jean Jaurès', 'Rue Garibaldi', 'Rue de Marseille', 'Rue Édouard Herriot', 'Quai Saint-Antoine'],
        'zip_format': lambda: f"{random.randint(69001, 69009)}",
        'house_range': (1, 999)
    },
    
    # Japan
    'tokyo': {
        'city': 'Tokyo',
        'state': '',
        'country': 'Japan',
        'streets': ['Shibuya', 'Shinjuku', 'Ginza', 'Harajuku', 'Akasaka', 'Roppongi', 'Aoyama', 'Ebisu',
                   'Ikebukuro', 'Ueno', 'Asakusa', 'Kanda', 'Nihonbashi', 'Tsukiji', 'Odaiba', 'Meguro'],
        'zip_format': lambda: f"{random.randint(100, 199)}-{random.randint(1000, 9999)}",
        'house_range': (1, 99)
    },
    
    'osaka': {
        'city': 'Osaka',
        'state': '',
        'country': 'Japan',
        'streets': ['Dotonbori', 'Namba', 'Shinsaibashi', 'Umeda', 'Tennoji', 'Sumiyoshi', 'Nippombashi',
                   'Kitahama', 'Honten', 'Sakaisuji', 'Midosuji', 'Hanshin', 'Osaka Castle'],
        'zip_format': lambda: f"{random.randint(530, 599)}-{random.randint(1000, 9999)}",
        'house_range': (1, 99)
    },
    
    # China
    'beijing': {
        'city': 'Beijing',
        'state': '',
        'country': 'China',
        'streets': ['Wangfujing', 'Xidan', 'Dongdan', 'Jianguomenwai', 'Chaoyang', 'Haidian', 'Xicheng',
                   'Dongcheng', 'Fengtai', 'Shijingshan', 'Mentougou', 'Fangshan', 'Tongzhou', 'Shunyi'],
        'zip_format': lambda: f"{random.randint(100000, 102629)}",
        'house_range': (1, 999)
    },
    
    'shanghai': {
        'city': 'Shanghai',
        'state': '',
        'country': 'China',
        'streets': ['Nanjing Road', 'Huaihai Road', 'Yan\'an Road', 'Zhongshan Road', 'Pudong', 'Lujiazui',
                   'Jing\'an', 'Xuhui', 'Changning', 'Putuo', 'Zhabei', 'Hongkou', 'Yangpu', 'Minhang'],
        'zip_format': lambda: f"{random.randint(200000, 202150)}",
        'house_range': (1, 999)
    },
    
    # India
    'mumbai': {
        'city': 'Mumbai',
        'state': 'Maharashtra',
        'country': 'India',
        'streets': ['Marine Drive', 'Linking Road', 'S.V. Road', 'Hill Road', 'Turner Road', 'Nepean Sea Road',
                   'Pedder Road', 'Altamount Road', 'Carmichael Road', 'Breach Candy', 'Colaba Causeway',
                   'Mohammed Ali Road', 'Lamington Road', 'Grant Road', 'Tardeo Road'],
        'zip_format': lambda: f"{random.randint(400001, 400104)}",
        'house_range': (1, 999)
    },
    
    'delhi': {
        'city': 'New Delhi',
        'state': 'Delhi',
        'country': 'India',
        'streets': ['Connaught Place', 'Rajpath', 'Janpath', 'Karol Bagh', 'Chandni Chowk', 'Paharganj',
                   'Lajpat Nagar', 'Khan Market', 'Defence Colony', 'Greater Kailash', 'Vasant Kunj',
                   'Dwarka', 'Rohini', 'Pitampura', 'Janakpuri'],
        'zip_format': lambda: f"{random.randint(110001, 110097)}",
        'house_range': (1, 999)
    },
    
    # Brazil
    'sao_paulo': {
        'city': 'São Paulo',
        'state': 'SP',
        'country': 'Brazil',
        'streets': ['Avenida Paulista', 'Rua Augusta', 'Rua Oscar Freire', 'Avenida Faria Lima', 'Rua 25 de Março',
                   'Avenida Rebouças', 'Rua da Consolação', 'Avenida São João', 'Rua Direita', 'Avenida Ipiranga',
                   'Rua Liberdade', 'Avenida Brigadeiro Luís Antônio', 'Rua Teodoro Sampaio'],
        'zip_format': lambda: f"{random.randint(1000, 9999)}-{random.randint(100, 999)}",
        'house_range': (1, 9999)
    },
    
    'rio_de_janeiro': {
        'city': 'Rio de Janeiro',
        'state': 'RJ',
        'country': 'Brazil',
        'streets': ['Copacabana', 'Ipanema', 'Leblon', 'Botafogo', 'Flamengo', 'Lapa', 'Santa Teresa',
                   'Tijuca', 'Barra da Tijuca', 'Avenida Atlântica', 'Rua Barata Ribeiro', 'Avenida Nossa Senhora'],
        'zip_format': lambda: f"{random.randint(20000, 23799)}-{random.randint(100, 999)}",
        'house_range': (1, 9999)
    },
    
    # Australia
    'sydney': {
        'city': 'Sydney',
        'state': 'NSW',
        'country': 'Australia',
        'streets': ['George Street', 'Pitt Street', 'Castlereagh Street', 'Elizabeth Street', 'Macquarie Street',
                   'King Street', 'Market Street', 'Park Street', 'Liverpool Street', 'Oxford Street',
                   'William Street', 'Crown Street', 'Bourke Street', 'Darlinghurst Road', 'Military Road'],
        'zip_format': lambda: f"{random.randint(1000, 2999)}",
        'house_range': (1, 999)
    },
    
    'melbourne': {
        'city': 'Melbourne',
        'state': 'VIC',
        'country': 'Australia',
        'streets': ['Collins Street', 'Bourke Street', 'Swanston Street', 'Flinders Street', 'Elizabeth Street',
                   'Queen Street', 'King Street', 'Spencer Street', 'Russell Street', 'Exhibition Street',
                   'St Kilda Road', 'Chapel Street', 'Toorak Road', 'High Street', 'Bridge Road'],
        'zip_format': lambda: f"{random.randint(3000, 3999)}",
        'house_range': (1, 999)
    },
    
    # Canada
    'toronto': {
        'city': 'Toronto',
        'state': 'ON',
        'country': 'Canada',
        'streets': ['Yonge Street', 'Queen Street', 'King Street', 'Bloor Street', 'College Street',
                   'Dundas Street', 'Bathurst Street', 'Spadina Avenue', 'University Avenue', 'Bay Street',
                   'Church Street', 'Jarvis Street', 'Parliament Street', 'Broadview Avenue', 'Ossington Avenue'],
        'zip_format': lambda: f"M{random.randint(1, 9)}{random.choice(string.ascii_uppercase)} {random.randint(1, 9)}{random.choice(string.ascii_uppercase)}{random.randint(1, 9)}",
        'house_range': (1, 9999)
    },
    
    'vancouver': {
        'city': 'Vancouver',
        'state': 'BC',
        'country': 'Canada',
        'streets': ['Robson Street', 'Granville Street', 'Davie Street', 'Georgia Street', 'Hastings Street',
                   'Broadway', 'Commercial Drive', 'Main Street', 'Cambie Street', 'Oak Street',
                   'Arbutus Street', 'MacDonald Street', 'Alma Street', 'Dunbar Street', 'Kerr Street'],
        'zip_format': lambda: f"V{random.randint(1, 9)}{random.choice(string.ascii_uppercase)} {random.randint(1, 9)}{random.choice(string.ascii_uppercase)}{random.randint(1, 9)}",
        'house_range': (1, 9999)
    },
    
    # Spain
    'madrid': {
        'city': 'Madrid',
        'state': '',
        'country': 'Spain',
        'streets': ['Gran Vía', 'Calle de Alcalá', 'Paseo de la Castellana', 'Calle Mayor', 'Calle de Atocha',
                   'Calle de Serrano', 'Calle de Goya', 'Calle de Fuencarral', 'Calle de Hortaleza', 'Calle de Preciados',
                   'Paseo del Prado', 'Calle de la Princesa', 'Calle de Bravo Murillo', 'Avenida de América'],
        'zip_format': lambda: f"{random.randint(28001, 28080)}",
        'house_range': (1, 999)
    },
    
    'barcelona': {
        'city': 'Barcelona',
        'state': '',
        'country': 'Spain',
        'streets': ['Las Ramblas', 'Passeig de Gràcia', 'Carrer de Balmes', 'Gran Via de les Corts Catalanes',
                   'Avinguda Diagonal', 'Carrer de Muntaner', 'Ronda de Sant Pere', 'Carrer del Consell de Cent',
                   'Carrer de València', 'Carrer de Provença', 'Carrer d\'Aragó', 'Passeig de Sant Joan'],
        'zip_format': lambda: f"{random.randint(8001, 8042)}",
        'house_range': (1, 999)
    }
}

def generate_address(city_data, city_key):
    """Generate a single address for a given city."""
    # Choose random street
    street = random.choice(city_data['streets'])
    
    # Generate house number
    house_min, house_max = city_data['house_range']
    house_number = random.randint(house_min, house_max)
    
    # Generate postal code
    postal_code = city_data['zip_format']()
    
    # Format address based on country
    if city_data['country'] == 'USA':
        if city_data['state']:
            address = f"{house_number} {street}, {city_data['city']}, {city_data['state']} {postal_code}, {city_data['country']}"
        else:
            address = f"{house_number} {street}, {city_data['city']} {postal_code}, {city_data['country']}"
    elif city_data['country'] == 'UK':
        address = f"{house_number} {street}, {city_data['city']} {postal_code}, {city_data['country']}"
    elif city_data['country'] in ['Germany', 'France', 'Spain']:
        address = f"{street} {house_number}, {postal_code} {city_data['city']}, {city_data['country']}"
    elif city_data['country'] == 'Japan':
        address = f"{house_number} {street}, {city_data['city']} {postal_code}, {city_data['country']}"
    elif city_data['country'] == 'China':
        address = f"{street} {house_number}, {city_data['city']} {postal_code}, {city_data['country']}"
    elif city_data['country'] == 'India':
        if city_data['state']:
            address = f"{house_number} {street}, {city_data['city']}, {city_data['state']} {postal_code}, {city_data['country']}"
        else:
            address = f"{house_number} {street}, {city_data['city']} {postal_code}, {city_data['country']}"
    elif city_data['country'] == 'Brazil':
        address = f"{street}, {house_number}, {city_data['city']}, {city_data['state']} {postal_code}, {city_data['country']}"
    elif city_data['country'] == 'Australia':
        address = f"{house_number} {street}, {city_data['city']} {city_data['state']} {postal_code}, {city_data['country']}"
    elif city_data['country'] == 'Canada':
        address = f"{house_number} {street}, {city_data['city']}, {city_data['state']} {postal_code}, {city_data['country']}"
    else:
        # Default format
        address = f"{house_number} {street}, {city_data['city']} {postal_code}, {city_data['country']}"
    
    return address

def generate_addresses_list(target_size=100000):
    """Generate a list of addresses from cities around the world."""
    addresses = []
    
    # Get all cities
    cities = list(address_data.keys())
    addresses_per_city = target_size // len(cities)
    
    # Generate addresses for each city
    for city_key in cities:
        city_data = address_data[city_key]
        for _ in range(addresses_per_city):
            address = generate_address(city_data, city_key)
            addresses.append(address)
    
    # Fill remaining spots to reach exact target size
    remaining = target_size - len(addresses)
    for _ in range(remaining):
        city_key = random.choice(cities)
        city_data = address_data[city_key]
        address = generate_address(city_data, city_key)
        addresses.append(address)
    
    # Shuffle the final list to mix cities
    random.shuffle(addresses)
    
    return addresses

# Generate the list of 100,000 addresses
addresses_list = generate_addresses_list(100000)

# Verify the length
print(f"Generated {len(addresses_list)} addresses")
print(f"First 10 addresses:")
for i, addr in enumerate(addresses_list[:10], 1):
    print(f"  {i}. {addr}")

print(f"\nLast 5 addresses:")
for i, addr in enumerate(addresses_list[-5:], len(addresses_list)-4):
    print(f"  {i}. {addr}")

# Show statistics
from collections import Counter

# Count by country
countries = [addr.split(', ')[-1] for addr in addresses_list]
country_counts = Counter(countries)

print(f"\nAddresses by country:")
for country, count in country_counts.items():
    print(f"  {country}: {count:,}")

# Count by city
cities = [addr.split(', ')[-2].split()[0] if len(addr.split(', ')) > 2 else addr.split(', ')[-2] for addr in addresses_list]
city_counts = Counter(cities)

print(f"\nTop 10 cities by address count:")
for city, count in city_counts.most_common(10):
    print(f"  {city}: {count:,}")

print(f"\nCities included in the dataset:")
for city_key, city_data in address_data.items():
    print(f"  {city_data['city']}, {city_data['country']}")